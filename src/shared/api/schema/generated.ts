/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/stories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all stories
         * @description Retrieves a list of stories.
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                    sort?: "best" | "popular" | "new";
                    length?: "short" | "medium" | "long";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Story"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stories/{storyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a story by ID
         * @description Retrieves a single story based on its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the story to retrieve. */
                    storyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Story"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stories/{storyId}/scenes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all scenes in a story
         * @description Retrieves a list of scenes in a story.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the story to retrieve scenes from. */
                    storyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Scene"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Story: {
            id: string;
            name: string;
            description: string;
            img: string;
            author: {
                id: string;
                login: string;
            };
            tags: string[];
            /** Format: int32 */
            sceneCount: number;
            /** Format: int32 */
            passes: number;
            /** Format: int32 */
            likes: number;
            isLiked: boolean;
            /** Format: date */
            date: string;
        };
        Scene: {
            /** @description Scene ID */
            id: string;
            /** @description ID of the story this scene belongs to */
            storyId: string;
            /**
             * Format: int32
             * @description Scene number within the story
             */
            number: number;
            /**
             * @description Type of the scene ('default', 'end')
             * @enum {string}
             */
            type: "default" | "end";
            /** @description Possible answers/choices for this scene */
            answers: components["schemas"]["Answer"][];
            /** @description Title of the scene */
            title: string;
            /** @description Detailed description of the scene */
            description: string;
            /**
             * Format: url
             * @description URL of the image associated with the scene
             */
            img: string;
            /**
             * Format: int32
             * @description Number of times this scene has been passed
             */
            passes?: number;
        };
        Answer: {
            /** @description ID of the answer choice */
            id: string;
            /** @description The text displayed for this answer choice */
            text: string;
            /** @description ID of the next scene, or null if this is an ending choice */
            nextSceneNumber: number;
        };
        User: {
            id: string;
            login: string;
        };
        LoginRequest: {
            login: string;
            /** Format: password */
            password: string;
        };
        Error: {
            message: string;
            code: string;
        };
        Session: {
            id: string;
            login: string;
        };
        AuthResponse: {
            session?: components["schemas"]["Session"];
        };
    };
    responses: {
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
